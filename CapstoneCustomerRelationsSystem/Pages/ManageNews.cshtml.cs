using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using CapstoneCustomerRelationsSystem.Domain;

namespace CapstoneCustomerRelationsSystem.Pages
{
    [Authorize(Roles = "Admin")]
    public class ManageNewsModel : PageModel 
    {
        private CRS RequestDirector = new CRS();
        public List<NewsItem> ExistingNewsItems;

        [BindProperty]
        public int NewsItemNumber { get; set; }
        [BindProperty]
        public string ImageURL { get; set; }
        [BindProperty]
        public string NewsItemLink { get; set; }
        [BindProperty]
        public int IndexPosition { get; set; }
        [BindProperty]
        public string OptionalNewsName { get; set; }
        [BindProperty]
        public string OptionalNewsDescription { get; set; }
        [BindProperty]
        public string OptionalNewsPrice { get; set; }
        [BindProperty]
        public int SelectedImageType { get; set; }
        public List<SelectListItem> ImageTypes { get; set; } = 
            new List<SelectListItem> {
                new SelectListItem {
                    Value = "1", 
                    Text = "Hero Image",
                },
                new SelectListItem {
                    Value = "2", 
                    Text = "Promotion",
                },
                new SelectListItem {
                    Value = "3", 
                    Text = "New",
                },
                new SelectListItem {
                    Value = "4", 
                    Text = "Hot",
                },
                new SelectListItem {
                    Value = "5", 
                    Text = "Deal",
                },
            };

        [BindProperty]
        public string Submit { get; set; }

        public void OnGet() {
            Initialize();
        }//end OnGet

        public void OnPost() {
            Initialize();
            switch (Submit)
            {
                case "Add":
                    //Check if required fields have values.
                    ValidateFields();
                    
                    //Check if the form is valid
                    if (ModelState.IsValid) {
                        //Make a new News Item.
                        //[Note:] The News Item Number gets generated by the database so we don't supply
                        //one here.
                        RequestDirector.MakeNewsItem(new NewsItem {
                            ImageType = ImageTypes[SelectedImageType -1].Text,
                            ImageURL = ImageURL,
                            NewsItemLink = NewsItemLink,
                            // IndexPosition = IndexPosition,
                            OptionalNewsName = OptionalNewsName == null?"":OptionalNewsName,
                            OptionalNewsDescription = OptionalNewsDescription == null?"":OptionalNewsDescription,
                            OptionalNewsPrice = OptionalNewsPrice == null?"":OptionalNewsPrice
                        });
                    }
                    break;
                case "Update":
                    //Check if required fields have values.
                    ValidateFields();
                    
                    //Check if the form is valid
                    if (ModelState.IsValid) {
                        //ToDo: Check if this is an existing news item.
                        //If so, update it with the new values.
                        List<NewsItem> newsItems = RequestDirector.RetrieveNewsItems();
                        if (newsItems.Exists(_x => _x.NewsItemNumber == NewsItemNumber)) {
                            // Update the News Item
                            RequestDirector.ModifyNewsItem(
                                new NewsItem {
                                    NewsItemNumber = NewsItemNumber,
                                    ImageType = ImageTypes[SelectedImageType -1].Text,
                                    ImageURL = ImageURL,
                                    NewsItemLink = NewsItemLink,
                                    IndexPosition = IndexPosition,
                                    OptionalNewsName = OptionalNewsName == null?"":OptionalNewsName,
                                    OptionalNewsDescription = OptionalNewsDescription == null?"":OptionalNewsDescription,
                                    OptionalNewsPrice = OptionalNewsPrice == null?"":OptionalNewsPrice
                                });
                        }
                    }
                    break;
                case "Delete":
                    if (NewsItemNumber != 0) {
                        RequestDirector.RemoveNewsItem(NewsItemNumber);
                    }
                    break;
                default:
                    if (Submit.Contains("PopulateUpdateForm")) {
                        Submit = Submit.Remove(0, 18);
                        //Retrieve News Item then populate form
                        NewsItem foundNewsItem = RequestDirector.RetrieveNewsItem(int.Parse(Submit));
                        NewsItemNumber = foundNewsItem.NewsItemNumber;
                        SelectedImageType = int.Parse(ImageTypes.First(_x => _x.Text == foundNewsItem.ImageType).Value);
                        ImageURL = foundNewsItem.ImageURL;
                        NewsItemLink = foundNewsItem.NewsItemLink;
                        IndexPosition = foundNewsItem.IndexPosition;
                        OptionalNewsName = foundNewsItem.OptionalNewsName;
                        OptionalNewsDescription = foundNewsItem.OptionalNewsDescription;
                        OptionalNewsPrice = foundNewsItem.OptionalNewsPrice;
                    }
                    
                    if (Submit.Contains("SetType")) {
                        Submit = Submit.Remove(0, 7);
                        SelectedImageType = int.Parse(ImageTypes.First(_x => _x.Text == Submit).Value);
                    }
                    break;
            }
            Initialize();
        }//end OnPost

        public void Initialize() {
            ExistingNewsItems = RequestDirector.RetrieveNewsItems().OrderBy(_x => _x.ImageType).ToList();
        }//end Initialize

        private void ValidateFields() {
            if (SelectedImageType <= 0 || SelectedImageType > ImageTypes.Count) 
                ModelState.AddModelError("SelectedImageType", "*An Image Type must be selected.");
            if (ImageURL == null) 
                ModelState.AddModelError("ImageURL", "*Image URL must be added.");
            if (NewsItemLink == null)
                ModelState.AddModelError("NewsItemLink", "*News Item Link must be added."); 
        }//end ValidateFields

    }//end class
}//end namespace